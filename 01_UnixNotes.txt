---------------------------------------------------------------------
Astronomy 300 - Week 1 Notes - Command Line Data Exploration
---------------------------------------------------------------------

Open up a terminal on one the astrolab machines (right click on the
background and select Open Terminal). First thing to do is to run the
setup file. The "%" is the Unix prompt, you do not type this character.

Get the setup file:

% cp ~pikaia/setup .   make sure to type the "."
% tcsh setup

Lets get some files to work with:

% git clone https://github.com/UWashington-Astro300/Astro300-W16.git

% cd Astro300-W16      change directory
% pwd                  Show the current directory path.

% ls                   list the files in a directory

% cat BrightStars.csv
% more BrightStars.csv                  "q" to quit
% less BrightStars.csv                  "q" to quit

% cp BrightStars.csv junk.dat           Copy files
% mv junk.dat junque.dat                Rename files
% rm junque.dat                         Delete file (NO RECOVERY!)

---------------------------------------------------------------------

wildcards (*) and (?)

* - Matches ANY (0 or more) character or characters in a filename.
? - Matches ANY ONE character in a filename.

% ls B*.csv        will find BrightStars.csv
% ls B?.csv        will NOT find BrightStars.csv

Be very careful with "*".  It can ruin your life!  For example "rm *"
will wipe out all of your files in the current directory, no questions
asked, no chance of recovery. 

---------------------------------------------------------------------

Ctrl+a jumps to the beginning of command-line
Ctrl+e jumps to the end of command-line
Ctrl+w erase one word on current line
Ctrl+u erase whole line

[TAB] Completion
% less R[TAB]      Hit [TAB] again to show all options

[UP] [DOWN] arrows - command history

% history          Shows history of commands
% man cmd          Shows manual page for cmd - 'q' to quit





---------------------------------------------------------------------

Line Numbers

% nl Raven.txt          Shows line number
% nl -ba Raven.txt      including blank lines (more useful)

---------------------------------------------------------------------

Chopping Streams (head and tail)

% head BrightStars.csv            first 10 lines
% tail BrightStars.csv            last 10 lines

% head -20 BrightStars.csv        first 20 lines
% tail -20 BrightStars.csv        last 20 lines

---------------------------------------------------------------------

Diverting Streams (> and >>)

% head -9 BrightStars.csv > small.dat    (>) crates file, overwriting old
% ls

% wc BrightStars.csv		       number of lines, words, and bytes
% wc small.dat

% tail -11 BrightStars.csv >> small.dat    (>>) appends data to file

% wc small.dat

---------------------------------------------------------------------

Connecting Streams - pipes (|)

% cat small.dat | grep 'A'        <- grep matches thing in ' '
% cat small.dat | grep 'A' | wc

% cat small.dat | grep -v '^\#'     ignore lines beginning with #
                                    This is VERY useful

---------------------------------------------------------------------

Sorting Streams - sort

% cat small.dat | grep -v '^\#' | sort -t ',' -k 2     Alphabetical sort (default)
% cat small.dat | grep -v '^\#' | sort -t ',' -k 1     Not good for numbers!
% cat small.dat | grep -v '^\#' | sort -t ',' -g -k 1  Numerical sort (very different)
% cat small.dat | grep -v '^\#' | sort -t ',' -g -r -k 5    Reverse sort

-------------------------------------------------------------

AWK - Aho, Weinberger, & Kernighan

% cat small.dat | grep -v '^\#' | awk -F, '{print $2}'    print 2nd column
% cat small.dat | grep -v '^\#' | awk -F, '{print $0}'    Same as % cat small.dat

% cat small.dat | grep -v '^\#' | awk -F, '{print $5,$1}'
% cat small.dat | grep -v '^\#' | awk -F, '{OFS=","}{print $5,$1}'




-------------------------------------------------------------

1E3 = 1000      2^3 = 2*2*2 = 8     380%360 = 20

==  equal to                     &&  and
!=  not equal to                 ||  or
>   greater than                 %   Mod
<   less than                    ++  Increment
>=  greater than or equal to     --  Decrement
<=  less than or equal to        +=  i += 6  (i = i + 6)

sqrt()      Square root    int()       Integer part of argument
log()       ln             exp()       e^x

-------------------------------------------------------------

Print all lines where the value of column 4 > 0.0:

% cat small.dat | grep -v '^\#' | awk -F, '{if ($4 > 0.0) print $0}'



Print all lines where the value of column 5 is between 3.0 and 4.0: 

% cat small.dat | grep -v '^\#' | awk -F, '{if ($5>3.0 && $5<4.0) print $0}'



Print all lines where the value of column 2 in NOT blank (0).

% cat small.dat | grep -v '^\#' | awk -F, '{if ($2!="") print $0}'



Print all lines where the value of column 2 contains "A" (anywhere in the column).

% cat small.dat | grep -v '^\#' | awk -F, '{if ($2~/A/) print $0}'



You can append '| wc' to the end of each of the above to get a count

-------------------------------------------------------------

